// Code generated by protoc-gen-go.
// source: mesos/exec/executor.proto
// DO NOT EDIT!

/*
Package exec is a generated protocol buffer package.

It is generated from these files:
	mesos/exec/executor.proto

It has these top-level messages:
	Event
	Call
*/
package exec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mesos "github.com/vladimirvivien/mesos-http/mesos/mesos"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Possible event types, followed by message definitions if
// applicable.
type Event_Type int32

const (
	Event_SUBSCRIBED   Event_Type = 1
	Event_LAUNCH       Event_Type = 2
	Event_KILL         Event_Type = 3
	Event_ACKNOWLEDGED Event_Type = 4
	Event_MESSAGE      Event_Type = 5
	Event_ERROR        Event_Type = 6
	// Received when the agent asks the executor to shutdown/kill itself. The
	// executor is then required to kill all its active tasks, send
	// 'TASK_KILLED' status updates and gracefully exit. If an
	// executor does not terminate within a certain period
	// `MESOS_EXECUTOR_SHUTDOWN_GRACE_PERIOD` (an environment variable set by
	// the agent upon executor startup), the agent  will forcefully destroy the
	// container where the executor is running. The agent would then send
	// 'TASK_LOST' updates for any remaining active tasks of this executor.
	Event_SHUTDOWN Event_Type = 7
)

var Event_Type_name = map[int32]string{
	1: "SUBSCRIBED",
	2: "LAUNCH",
	3: "KILL",
	4: "ACKNOWLEDGED",
	5: "MESSAGE",
	6: "ERROR",
	7: "SHUTDOWN",
}
var Event_Type_value = map[string]int32{
	"SUBSCRIBED":   1,
	"LAUNCH":       2,
	"KILL":         3,
	"ACKNOWLEDGED": 4,
	"MESSAGE":      5,
	"ERROR":        6,
	"SHUTDOWN":     7,
}

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}
func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}
func (x *Event_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_Type_value, data, "Event_Type")
	if err != nil {
		return err
	}
	*x = Event_Type(value)
	return nil
}
func (Event_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Possible call types, followed by message definitions if
// applicable.
type Call_Type int32

const (
	Call_SUBSCRIBE Call_Type = 1
	Call_UPDATE    Call_Type = 2
	Call_MESSAGE   Call_Type = 3
)

var Call_Type_name = map[int32]string{
	1: "SUBSCRIBE",
	2: "UPDATE",
	3: "MESSAGE",
}
var Call_Type_value = map[string]int32{
	"SUBSCRIBE": 1,
	"UPDATE":    2,
	"MESSAGE":   3,
}

func (x Call_Type) Enum() *Call_Type {
	p := new(Call_Type)
	*p = x
	return p
}
func (x Call_Type) String() string {
	return proto.EnumName(Call_Type_name, int32(x))
}
func (x *Call_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Call_Type_value, data, "Call_Type")
	if err != nil {
		return err
	}
	*x = Call_Type(value)
	return nil
}
func (Call_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// *
// Executor event API.
//
// An event is described using the standard protocol buffer "union"
// trick, see https://developers.google.com/protocol-buffers/docs/techniques#union.
type Event struct {
	// Type of the event, indicates which optional field below should be
	// present if that type has a nested message definition.
	Type             *Event_Type         `protobuf:"varint,1,req,name=type,enum=mesos.Event_Type" json:"type,omitempty"`
	Subscribed       *Event_Subscribed   `protobuf:"bytes,2,opt,name=subscribed" json:"subscribed,omitempty"`
	Acknowledged     *Event_Acknowledged `protobuf:"bytes,3,opt,name=acknowledged" json:"acknowledged,omitempty"`
	Launch           *Event_Launch       `protobuf:"bytes,4,opt,name=launch" json:"launch,omitempty"`
	Kill             *Event_Kill         `protobuf:"bytes,5,opt,name=kill" json:"kill,omitempty"`
	Message          *Event_Message      `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	Error            *Event_Error        `protobuf:"bytes,7,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetType() Event_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Event_SUBSCRIBED
}

func (m *Event) GetSubscribed() *Event_Subscribed {
	if m != nil {
		return m.Subscribed
	}
	return nil
}

func (m *Event) GetAcknowledged() *Event_Acknowledged {
	if m != nil {
		return m.Acknowledged
	}
	return nil
}

func (m *Event) GetLaunch() *Event_Launch {
	if m != nil {
		return m.Launch
	}
	return nil
}

func (m *Event) GetKill() *Event_Kill {
	if m != nil {
		return m.Kill
	}
	return nil
}

func (m *Event) GetMessage() *Event_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Event) GetError() *Event_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// First event received when the executor subscribes.
// The 'id' field in the 'framework_info' will be set.
type Event_Subscribed struct {
	ExecutorInfo     *mesos.ExecutorInfo  `protobuf:"bytes,1,req,name=executor_info,json=executorInfo" json:"executor_info,omitempty"`
	FrameworkInfo    *mesos.FrameworkInfo `protobuf:"bytes,2,req,name=framework_info,json=frameworkInfo" json:"framework_info,omitempty"`
	AgentInfo        *mesos.AgentInfo     `protobuf:"bytes,3,req,name=agent_info,json=agentInfo" json:"agent_info,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Event_Subscribed) Reset()                    { *m = Event_Subscribed{} }
func (m *Event_Subscribed) String() string            { return proto.CompactTextString(m) }
func (*Event_Subscribed) ProtoMessage()               {}
func (*Event_Subscribed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Event_Subscribed) GetExecutorInfo() *mesos.ExecutorInfo {
	if m != nil {
		return m.ExecutorInfo
	}
	return nil
}

func (m *Event_Subscribed) GetFrameworkInfo() *mesos.FrameworkInfo {
	if m != nil {
		return m.FrameworkInfo
	}
	return nil
}

func (m *Event_Subscribed) GetAgentInfo() *mesos.AgentInfo {
	if m != nil {
		return m.AgentInfo
	}
	return nil
}

// Received when the framework attempts to launch a task. Once
// the task is successfully launched, the executor must respond with
// a TASK_RUNNING update (See TaskState in v1/mesos.proto).
type Event_Launch struct {
	Task             *mesos.TaskInfo `protobuf:"bytes,1,req,name=task" json:"task,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Event_Launch) Reset()                    { *m = Event_Launch{} }
func (m *Event_Launch) String() string            { return proto.CompactTextString(m) }
func (*Event_Launch) ProtoMessage()               {}
func (*Event_Launch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Event_Launch) GetTask() *mesos.TaskInfo {
	if m != nil {
		return m.Task
	}
	return nil
}

// Received when the scheduler wants to kill a specific task. Once
// the task is terminated, the executor should send a TASK_KILLED
// (or TASK_FAILED) update. The terminal update is necessary so
// Mesos can release the resources associated with the task.
type Event_Kill struct {
	TaskId           *mesos.TaskID `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Event_Kill) Reset()                    { *m = Event_Kill{} }
func (m *Event_Kill) String() string            { return proto.CompactTextString(m) }
func (*Event_Kill) ProtoMessage()               {}
func (*Event_Kill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *Event_Kill) GetTaskId() *mesos.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

// Received when the agent acknowledges the receipt of status
// update. Schedulers are responsible for explicitly acknowledging
// the receipt of status updates that have 'update.status().uuid()'
// field set. Unacknowledged updates can be retried by the executor.
// They should also be sent by the executor whenever it
// re-subscribes.
type Event_Acknowledged struct {
	TaskId           *mesos.TaskID `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	Uuid             []byte        `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Event_Acknowledged) Reset()                    { *m = Event_Acknowledged{} }
func (m *Event_Acknowledged) String() string            { return proto.CompactTextString(m) }
func (*Event_Acknowledged) ProtoMessage()               {}
func (*Event_Acknowledged) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *Event_Acknowledged) GetTaskId() *mesos.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *Event_Acknowledged) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

// Received when a custom message generated by the scheduler is
// forwarded by the agent. Note that this message is not
// interpreted by Mesos and is only forwarded (without reliability
// guarantees) to the executor. It is up to the scheduler to retry
// if the message is dropped for any reason.
type Event_Message struct {
	Data             []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Event_Message) Reset()                    { *m = Event_Message{} }
func (m *Event_Message) String() string            { return proto.CompactTextString(m) }
func (*Event_Message) ProtoMessage()               {}
func (*Event_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

func (m *Event_Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Received in case the executor sends invalid calls (e.g.,
// required values not set).
// TODO(arojas): Remove this once the old executor driver is no
// longer supported. With HTTP API all errors will be signaled via
// HTTP response codes.
type Event_Error struct {
	Message          *string `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Event_Error) Reset()                    { *m = Event_Error{} }
func (m *Event_Error) String() string            { return proto.CompactTextString(m) }
func (*Event_Error) ProtoMessage()               {}
func (*Event_Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 5} }

func (m *Event_Error) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Executor call API.
//
// Like Event, a Call is described using the standard protocol buffer
// "union" trick (see above).
type Call struct {
	// Identifies the executor which generated this call.
	ExecutorId  *mesos.ExecutorID  `protobuf:"bytes,1,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	FrameworkId *mesos.FrameworkID `protobuf:"bytes,2,req,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	// Type of the call, indicates which optional field below should be
	// present if that type has a nested message definition.
	// In case type is SUBSCRIBED, no message needs to be set.
	Type             *Call_Type      `protobuf:"varint,3,req,name=type,enum=mesos.Call_Type" json:"type,omitempty"`
	Subscribe        *Call_Subscribe `protobuf:"bytes,4,opt,name=subscribe" json:"subscribe,omitempty"`
	Update           *Call_Update    `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
	Message          *Call_Message   `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Call) Reset()                    { *m = Call{} }
func (m *Call) String() string            { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()               {}
func (*Call) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Call) GetExecutorId() *mesos.ExecutorID {
	if m != nil {
		return m.ExecutorId
	}
	return nil
}

func (m *Call) GetFrameworkId() *mesos.FrameworkID {
	if m != nil {
		return m.FrameworkId
	}
	return nil
}

func (m *Call) GetType() Call_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Call_SUBSCRIBE
}

func (m *Call) GetSubscribe() *Call_Subscribe {
	if m != nil {
		return m.Subscribe
	}
	return nil
}

func (m *Call) GetUpdate() *Call_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *Call) GetMessage() *Call_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

// Request to subscribe with the agent. If subscribing after a disconnection,
// it must include a list of all the tasks and updates which haven't been
// acknowledged by the scheduler.
type Call_Subscribe struct {
	UnacknowledgedTasks   []*mesos.TaskInfo `protobuf:"bytes,1,rep,name=unacknowledged_tasks,json=unacknowledgedTasks" json:"unacknowledged_tasks,omitempty"`
	UnacknowledgedUpdates []*Call_Update    `protobuf:"bytes,2,rep,name=unacknowledged_updates,json=unacknowledgedUpdates" json:"unacknowledged_updates,omitempty"`
	XXX_unrecognized      []byte            `json:"-"`
}

func (m *Call_Subscribe) Reset()                    { *m = Call_Subscribe{} }
func (m *Call_Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Call_Subscribe) ProtoMessage()               {}
func (*Call_Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Call_Subscribe) GetUnacknowledgedTasks() []*mesos.TaskInfo {
	if m != nil {
		return m.UnacknowledgedTasks
	}
	return nil
}

func (m *Call_Subscribe) GetUnacknowledgedUpdates() []*Call_Update {
	if m != nil {
		return m.UnacknowledgedUpdates
	}
	return nil
}

// Notifies the scheduler that a task has transitioned from one
// state to another. Status updates should be used by executors
// to reliably communicate the status of the tasks that they
// manage. It is crucial that a terminal update (see TaskState
// in v1/mesos.proto) is sent to the scheduler as soon as the task
// terminates, in order for Mesos to release the resources allocated
// to the task. It is the responsibility of the scheduler to
// explicitly acknowledge the receipt of a status update. See
// 'Acknowledged' in the 'Events' section above for the semantics.
type Call_Update struct {
	Status           *mesos.TaskStatus `protobuf:"bytes,1,req,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Call_Update) Reset()                    { *m = Call_Update{} }
func (m *Call_Update) String() string            { return proto.CompactTextString(m) }
func (*Call_Update) ProtoMessage()               {}
func (*Call_Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Call_Update) GetStatus() *mesos.TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Sends arbitrary binary data to the scheduler. Note that Mesos
// neither interprets this data nor makes any guarantees about the
// delivery of this message to the scheduler.
// See 'Message' in the 'Events' section.
type Call_Message struct {
	Data             []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Call_Message) Reset()                    { *m = Call_Message{} }
func (m *Call_Message) String() string            { return proto.CompactTextString(m) }
func (*Call_Message) ProtoMessage()               {}
func (*Call_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *Call_Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "mesos.Event")
	proto.RegisterType((*Event_Subscribed)(nil), "mesos.Event.Subscribed")
	proto.RegisterType((*Event_Launch)(nil), "mesos.Event.Launch")
	proto.RegisterType((*Event_Kill)(nil), "mesos.Event.Kill")
	proto.RegisterType((*Event_Acknowledged)(nil), "mesos.Event.Acknowledged")
	proto.RegisterType((*Event_Message)(nil), "mesos.Event.Message")
	proto.RegisterType((*Event_Error)(nil), "mesos.Event.Error")
	proto.RegisterType((*Call)(nil), "mesos.Call")
	proto.RegisterType((*Call_Subscribe)(nil), "mesos.Call.Subscribe")
	proto.RegisterType((*Call_Update)(nil), "mesos.Call.Update")
	proto.RegisterType((*Call_Message)(nil), "mesos.Call.Message")
	proto.RegisterEnum("mesos.Event_Type", Event_Type_name, Event_Type_value)
	proto.RegisterEnum("mesos.Call_Type", Call_Type_name, Call_Type_value)
}

var fileDescriptor0 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xed, 0x6e, 0xda, 0x48,
	0x14, 0x15, 0x60, 0x4c, 0xb8, 0x40, 0xd6, 0xb9, 0x49, 0x76, 0x89, 0xa5, 0x95, 0xb2, 0x6c, 0x5b,
	0xa5, 0xad, 0x02, 0x52, 0xa2, 0xaa, 0x95, 0xda, 0xfe, 0x00, 0xec, 0x26, 0x34, 0x34, 0xa9, 0x06,
	0x50, 0xa4, 0xfe, 0x89, 0x1c, 0xec, 0x24, 0x16, 0x60, 0x23, 0x7f, 0x90, 0xf6, 0x55, 0xfa, 0x1c,
	0x7d, 0x88, 0x3e, 0x45, 0x9f, 0xa5, 0x33, 0xe3, 0x31, 0x8c, 0x69, 0x2a, 0xf5, 0x0f, 0x1a, 0xfb,
	0x9c, 0xe3, 0xb9, 0xf7, 0x9e, 0x73, 0x81, 0xbd, 0x99, 0x13, 0xfa, 0x61, 0xcb, 0xf9, 0xec, 0x8c,
	0xf9, 0x4f, 0x1c, 0xf9, 0x41, 0x73, 0x1e, 0xf8, 0x91, 0x8f, 0x45, 0x0e, 0xe9, 0x6f, 0x6e, 0xdd,
	0xe8, 0x2e, 0xbe, 0x6e, 0x8e, 0xfd, 0x59, 0x6b, 0x31, 0xb5, 0x6c, 0x77, 0xe6, 0x06, 0x0b, 0x77,
	0xe1, 0x3a, 0x5e, 0x8b, 0x13, 0x0e, 0xef, 0xa2, 0x68, 0x9e, 0x1c, 0xe5, 0xdf, 0xe4, 0x23, 0x8d,
	0x1f, 0x2a, 0x14, 0xcd, 0x85, 0xe3, 0x45, 0xf8, 0x18, 0x94, 0xe8, 0xcb, 0xdc, 0xa9, 0xe7, 0xf6,
	0xf3, 0x07, 0x9b, 0x47, 0x5b, 0xcd, 0x84, 0xc5, 0xb1, 0xe6, 0x90, 0x02, 0x84, 0xc3, 0xf8, 0x12,
	0x20, 0x8c, 0xaf, 0xc3, 0x71, 0xe0, 0x5e, 0x3b, 0x76, 0x3d, 0xbf, 0x9f, 0x3b, 0xa8, 0x1c, 0xfd,
	0x93, 0x21, 0x0f, 0x96, 0x30, 0x91, 0xa8, 0xf8, 0x16, 0xaa, 0xd6, 0x78, 0xe2, 0xf9, 0xf7, 0x53,
	0xc7, 0xbe, 0xa5, 0xd2, 0x02, 0x97, 0xee, 0x65, 0xa4, 0x6d, 0x89, 0x40, 0x32, 0x74, 0x7c, 0x0e,
	0xea, 0xd4, 0x8a, 0xbd, 0xf1, 0x5d, 0x5d, 0xe1, 0xc2, 0xed, 0x8c, 0xb0, 0xcf, 0x21, 0x22, 0x28,
	0xac, 0x97, 0x89, 0x3b, 0x9d, 0xd6, 0x8b, 0x9c, 0x9a, 0xed, 0xe5, 0x8c, 0x02, 0x84, 0xc3, 0xd8,
	0x84, 0x12, 0x45, 0x42, 0xeb, 0xd6, 0xa9, 0xab, 0x9c, 0xb9, 0x93, 0x61, 0x7e, 0x48, 0x30, 0x92,
	0x92, 0xf0, 0x00, 0x8a, 0x4e, 0x10, 0xf8, 0x41, 0xbd, 0xc4, 0xd9, 0x98, 0x61, 0x9b, 0x0c, 0x21,
	0x09, 0x41, 0xff, 0x96, 0x03, 0x58, 0xcd, 0x01, 0x5f, 0x41, 0x2d, 0x35, 0xef, 0xca, 0xf5, 0x6e,
	0x7c, 0x3e, 0x64, 0xa9, 0x07, 0x81, 0xf5, 0x28, 0x44, 0xaa, 0x8e, 0xf4, 0x84, 0xaf, 0x61, 0xf3,
	0x26, 0xb0, 0x66, 0xce, 0xbd, 0x1f, 0x4c, 0x12, 0x69, 0x9e, 0x4b, 0xd3, 0x4a, 0xdf, 0xa5, 0x20,
	0xd7, 0xd6, 0x6e, 0xe4, 0x47, 0x6c, 0x01, 0xd0, 0xb2, 0xbd, 0x28, 0x11, 0x16, 0xb8, 0x50, 0x13,
	0xc2, 0x36, 0x03, 0xb8, 0xa8, 0x6c, 0xa5, 0x47, 0xfd, 0x10, 0xd4, 0x64, 0x92, 0xf8, 0x3f, 0x4d,
	0x83, 0x15, 0x4e, 0x44, 0xa1, 0x7f, 0x09, 0xd1, 0x90, 0xbe, 0xe2, 0x1a, 0x0e, 0xea, 0x4d, 0x50,
	0xd8, 0x34, 0xf1, 0x09, 0x94, 0xd8, 0xf3, 0x95, 0x6b, 0x0b, 0x7e, 0x4d, 0xe6, 0x1b, 0x44, 0x65,
	0x68, 0xcf, 0xd6, 0xdf, 0x43, 0x55, 0x76, 0xf8, 0x4f, 0x75, 0x88, 0xa0, 0xc4, 0xb1, 0x6b, 0xf3,
	0xd6, 0xab, 0x84, 0x9f, 0xf5, 0x7f, 0xa1, 0x24, 0xfc, 0x61, 0xb0, 0x6d, 0x45, 0x16, 0xff, 0x06,
	0x85, 0xd9, 0x59, 0xff, 0x8f, 0xc6, 0x9a, 0x39, 0x81, 0xf5, 0x95, 0xc7, 0x0c, 0x2f, 0x2f, 0xdd,
	0x6c, 0xd8, 0xa0, 0xb0, 0x5c, 0xe3, 0x26, 0xb5, 0x6a, 0xd4, 0x19, 0x74, 0x49, 0xaf, 0x63, 0x1a,
	0x5a, 0x0e, 0x81, 0x0e, 0xa1, 0x3d, 0x3a, 0xef, 0x9e, 0x6a, 0x79, 0xdc, 0xa0, 0x1d, 0xf6, 0xfa,
	0x7d, 0xad, 0x80, 0x1a, 0xad, 0xbd, 0x7b, 0x76, 0x7e, 0x71, 0xd9, 0x37, 0x8d, 0x13, 0xca, 0x53,
	0xb0, 0x42, 0x2b, 0x30, 0x07, 0x83, 0xf6, 0x89, 0xa9, 0x15, 0xb1, 0x4c, 0xef, 0x23, 0xe4, 0x82,
	0x68, 0x2a, 0x56, 0x61, 0x63, 0x70, 0x3a, 0x1a, 0x1a, 0x17, 0x97, 0xe7, 0x5a, 0xa9, 0xf1, 0x5d,
	0x01, 0xa5, 0x6b, 0xd1, 0x21, 0x1d, 0x41, 0x65, 0x95, 0x81, 0xb4, 0xe1, 0xad, 0xf5, 0x04, 0x18,
	0x04, 0x96, 0xfe, 0xdb, 0xf8, 0x02, 0xaa, 0x92, 0xfb, 0xb6, 0xf0, 0x1e, 0x7f, 0xf1, 0xde, 0x20,
	0x95, 0x95, 0xf3, 0x36, 0x3e, 0x12, 0xab, 0x5c, 0xe0, 0xab, 0x9c, 0x3a, 0xce, 0xaa, 0x90, 0x37,
	0xf9, 0x18, 0xca, 0xcb, 0xf5, 0x14, 0x4b, 0xb5, 0x2b, 0x53, 0x97, 0xf9, 0x25, 0x2b, 0x1e, 0x3e,
	0x03, 0x35, 0x9e, 0xd3, 0x09, 0x3b, 0x62, 0xb7, 0x50, 0x56, 0x8c, 0x38, 0x42, 0x04, 0x03, 0x0f,
	0xd7, 0xd7, 0x6b, 0x5b, 0x26, 0xaf, 0x6f, 0x97, 0xfe, 0x35, 0x07, 0xe5, 0xe5, 0x9d, 0xd8, 0x81,
	0x9d, 0xd8, 0x93, 0xff, 0x01, 0xae, 0x58, 0x18, 0x42, 0x3a, 0xb7, 0xc2, 0x43, 0x81, 0xdc, 0xce,
	0x92, 0xd9, 0xfb, 0x10, 0x7b, 0xf0, 0xf7, 0xda, 0x37, 0x92, 0xca, 0x42, 0x3a, 0xc8, 0xc2, 0x6f,
	0x8a, 0xdf, 0xcd, 0x2a, 0x92, 0xb7, 0xa1, 0x7e, 0x0c, 0x6a, 0x72, 0xc4, 0xa7, 0xa0, 0x86, 0x91,
	0x15, 0xc5, 0xe1, 0x9a, 0x85, 0xec, 0xca, 0x01, 0x07, 0x88, 0x20, 0x3c, 0x94, 0xd1, 0xfc, 0x2a,
	0xa3, 0x8d, 0xa6, 0x08, 0x60, 0x8d, 0xf6, 0x9d, 0x06, 0x30, 0xc9, 0xdf, 0xe8, 0xa3, 0xd1, 0x1e,
	0x9a, 0x34, 0x7f, 0x52, 0xc6, 0x0a, 0x1d, 0xf5, 0x93, 0xc2, 0xb2, 0xf1, 0x33, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0xe7, 0xcb, 0xe4, 0x14, 0x06, 0x00, 0x00,
}
